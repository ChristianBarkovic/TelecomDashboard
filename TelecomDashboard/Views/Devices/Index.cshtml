@model IEnumerable<TelecomDashboard.Models.Device>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form method="get">
    <input type="text" name="search" placeholder="Search devices..." class="form-control" value="@ViewData["SearchTerm"]">
    <button type="submit" class="btn btn-primary mt-2">Search</button>
</form>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>
                <!-- Device Name Sorting Links -->
                <a asp-action="Index" asp-route-sortOrder="@((ViewData["SortOrder"]?.ToString() == "name_asc") ? "name_desc" : "name_asc")">
                    Device Name
                    @if (ViewData["SortOrder"]?.ToString() == "name_asc")
                    {
                        <span>↑</span> <!-- Ascending -->
                    }
                    else if (ViewData["SortOrder"]?.ToString() == "name_desc")
                    {
                        <span>↓</span> <!-- Descending -->
                    }
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IPAddress)
            </th>
            <th>
                <!-- Status Sorting Links -->
                <a asp-action="Index" asp-route-sortOrder="@((ViewData["SortOrder"]?.ToString() == "status_asc") ? "status_desc" : "status_asc")">
                    Status
                    @if (ViewData["SortOrder"]?.ToString() == "status_asc")
                    {
                        <span>↑</span> <!-- Ascending -->
                    }
                    else if (ViewData["SortOrder"]?.ToString() == "status_desc")
                    {
                        <span>↓</span> <!-- Descending -->
                    }
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SignalStrength)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastChecked)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IPAddress)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsOnline)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SignalStrength)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastChecked)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Delete</a>
            </td>
        </tr>
}
        
    </tbody>
</table>

<!-- Chart.js Script -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Pie Chart -->
<canvas id="deviceStatusChart" width="400" height="200"></canvas>

<!-- Custom JavaScript for Pie Chart -->
<script>
    window.onload = function () {
        var deviceStatuses = {
            online: @Model.Count(d => d.IsOnline == true),  // Count online devices
            offline: @Model.Count(d => d.IsOnline == false) // Count offline devices
            };

        var ctx = document.getElementById('deviceStatusChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Online', 'Offline'],
                datasets: [{
                    data: [deviceStatuses.online, deviceStatuses.offline],
                    backgroundColor: ['#28a745', '#dc3545']
                }]
            }
        });

        // Resize the canvas to 50%
        var canvas = document.getElementById('deviceStatusChart');
        canvas.width = canvas.width / 2;  // Resize to 50% width
        canvas.height = canvas.height / 2;  // Resize to 50% height
    };
</script>

<!-- Custom CSS to resize, center, and add space -->
<style>
    #deviceStatusChart {
        margin: 20px auto; /* Center the canvas and add space around it */
        display: block;
    }

    /* Add a gap between the canvas and the table */
    table {
        margin-bottom: 20px;
    }
</style>